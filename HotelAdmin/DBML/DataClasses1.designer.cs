#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelAdmin.DBML
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DBHotel")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMasterCategory(MasterCategory instance);
    partial void UpdateMasterCategory(MasterCategory instance);
    partial void DeleteMasterCategory(MasterCategory instance);
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertHotelEventService(HotelEventService instance);
    partial void UpdateHotelEventService(HotelEventService instance);
    partial void DeleteHotelEventService(HotelEventService instance);
    partial void InsertHotelFoodService(HotelFoodService instance);
    partial void UpdateHotelFoodService(HotelFoodService instance);
    partial void DeleteHotelFoodService(HotelFoodService instance);
    partial void InsertHotelRoom(HotelRoom instance);
    partial void UpdateHotelRoom(HotelRoom instance);
    partial void DeleteHotelRoom(HotelRoom instance);
    partial void InsertHotelService(HotelService instance);
    partial void UpdateHotelService(HotelService instance);
    partial void DeleteHotelService(HotelService instance);
    partial void InsertMasterFeedback(MasterFeedback instance);
    partial void UpdateMasterFeedback(MasterFeedback instance);
    partial void DeleteMasterFeedback(MasterFeedback instance);
    partial void InsertMasterHotelType(MasterHotelType instance);
    partial void UpdateMasterHotelType(MasterHotelType instance);
    partial void DeleteMasterHotelType(MasterHotelType instance);
    partial void InsertSubCategory(SubCategory instance);
    partial void UpdateSubCategory(SubCategory instance);
    partial void DeleteSubCategory(SubCategory instance);
    partial void InsertUserHotel(UserHotel instance);
    partial void UpdateUserHotel(UserHotel instance);
    partial void DeleteUserHotel(UserHotel instance);
    partial void InsertUserRegistration(UserRegistration instance);
    partial void UpdateUserRegistration(UserRegistration instance);
    partial void DeleteUserRegistration(UserRegistration instance);
    partial void InsertMasterRoomType(MasterRoomType instance);
    partial void UpdateMasterRoomType(MasterRoomType instance);
    partial void DeleteMasterRoomType(MasterRoomType instance);
    partial void InsertMasterComplain(MasterComplain instance);
    partial void UpdateMasterComplain(MasterComplain instance);
    partial void DeleteMasterComplain(MasterComplain instance);
    partial void InsertUserPackage(UserPackage instance);
    partial void UpdateUserPackage(UserPackage instance);
    partial void DeleteUserPackage(UserPackage instance);
    partial void InsertHotelOtherService(HotelOtherService instance);
    partial void UpdateHotelOtherService(HotelOtherService instance);
    partial void DeleteHotelOtherService(HotelOtherService instance);
    partial void InsertMasterHotelRegistration(MasterHotelRegistration instance);
    partial void UpdateMasterHotelRegistration(MasterHotelRegistration instance);
    partial void DeleteMasterHotelRegistration(MasterHotelRegistration instance);
    partial void InsertPackage(Package instance);
    partial void UpdatePackage(Package instance);
    partial void DeletePackage(Package instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DBHotelConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MasterCategory> MasterCategories
		{
			get
			{
				return this.GetTable<MasterCategory>();
			}
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<HotelEventService> HotelEventServices
		{
			get
			{
				return this.GetTable<HotelEventService>();
			}
		}
		
		public System.Data.Linq.Table<HotelFoodService> HotelFoodServices
		{
			get
			{
				return this.GetTable<HotelFoodService>();
			}
		}
		
		public System.Data.Linq.Table<HotelRoom> HotelRooms
		{
			get
			{
				return this.GetTable<HotelRoom>();
			}
		}
		
		public System.Data.Linq.Table<HotelService> HotelServices
		{
			get
			{
				return this.GetTable<HotelService>();
			}
		}
		
		public System.Data.Linq.Table<MasterFeedback> MasterFeedbacks
		{
			get
			{
				return this.GetTable<MasterFeedback>();
			}
		}
		
		public System.Data.Linq.Table<MasterHotelType> MasterHotelTypes
		{
			get
			{
				return this.GetTable<MasterHotelType>();
			}
		}
		
		public System.Data.Linq.Table<SubCategory> SubCategories
		{
			get
			{
				return this.GetTable<SubCategory>();
			}
		}
		
		public System.Data.Linq.Table<UserHotel> UserHotels
		{
			get
			{
				return this.GetTable<UserHotel>();
			}
		}
		
		public System.Data.Linq.Table<UserRegistration> UserRegistrations
		{
			get
			{
				return this.GetTable<UserRegistration>();
			}
		}
		
		public System.Data.Linq.Table<MasterRoomType> MasterRoomTypes
		{
			get
			{
				return this.GetTable<MasterRoomType>();
			}
		}
		
		public System.Data.Linq.Table<MasterComplain> MasterComplains
		{
			get
			{
				return this.GetTable<MasterComplain>();
			}
		}
		
		public System.Data.Linq.Table<UserPackage> UserPackages
		{
			get
			{
				return this.GetTable<UserPackage>();
			}
		}
		
		public System.Data.Linq.Table<HotelOtherService> HotelOtherServices
		{
			get
			{
				return this.GetTable<HotelOtherService>();
			}
		}
		
		public System.Data.Linq.Table<MasterHotelRegistration> MasterHotelRegistrations
		{
			get
			{
				return this.GetTable<MasterHotelRegistration>();
			}
		}
		
		public System.Data.Linq.Table<Package> Packages
		{
			get
			{
				return this.GetTable<Package>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MasterCategory")]
	public partial class MasterCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _CategoryName;
		
		private string _CategoryDescription;
		
		private EntitySet<SubCategory> _SubCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryDescriptionChanging(string value);
    partial void OnCategoryDescriptionChanged();
    #endregion
		
		public MasterCategory()
		{
			this._SubCategories = new EntitySet<SubCategory>(new Action<SubCategory>(this.attach_SubCategories), new Action<SubCategory>(this.detach_SubCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDescription", DbType="VarChar(200)")]
		public string CategoryDescription
		{
			get
			{
				return this._CategoryDescription;
			}
			set
			{
				if ((this._CategoryDescription != value))
				{
					this.OnCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CategoryDescription = value;
					this.SendPropertyChanged("CategoryDescription");
					this.OnCategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MasterCategory_SubCategory", Storage="_SubCategories", ThisKey="CategoryId", OtherKey="CategoryID")]
		public EntitySet<SubCategory> SubCategories
		{
			get
			{
				return this._SubCategories;
			}
			set
			{
				this._SubCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.MasterCategory = this;
		}
		
		private void detach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.MasterCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Area")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AreaID;
		
		private string _AreaName;
		
		private string _AreaDescription;
		
		private int _CityID;
		
		private EntityRef<City> _City;
		
		private EntityRef<UserRegistration> _UserRegistration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAreaIDChanging(int value);
    partial void OnAreaIDChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    partial void OnAreaDescriptionChanging(string value);
    partial void OnAreaDescriptionChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    #endregion
		
		public Area()
		{
			this._City = default(EntityRef<City>);
			this._UserRegistration = default(EntityRef<UserRegistration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					if (this._UserRegistration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this.OnAreaNameChanging(value);
					this.SendPropertyChanging();
					this._AreaName = value;
					this.SendPropertyChanged("AreaName");
					this.OnAreaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaDescription", DbType="VarChar(200)")]
		public string AreaDescription
		{
			get
			{
				return this._AreaDescription;
			}
			set
			{
				if ((this._AreaDescription != value))
				{
					this.OnAreaDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AreaDescription = value;
					this.SendPropertyChanged("AreaDescription");
					this.OnAreaDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Area", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Areas.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Areas.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_Area", Storage="_UserRegistration", ThisKey="AreaID", OtherKey="AreaID", IsForeignKey=true)]
		public UserRegistration UserRegistration
		{
			get
			{
				return this._UserRegistration.Entity;
			}
			set
			{
				UserRegistration previousValue = this._UserRegistration.Entity;
				if (((previousValue != value) 
							|| (this._UserRegistration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegistration.Entity = null;
						previousValue.Areas.Remove(this);
					}
					this._UserRegistration.Entity = value;
					if ((value != null))
					{
						value.Areas.Add(this);
						this._AreaID = value.AreaID;
					}
					else
					{
						this._AreaID = default(int);
					}
					this.SendPropertyChanged("UserRegistration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _CityName;
		
		private string _CityDescription;
		
		private EntitySet<Area> _Areas;
		
		private EntityRef<UserRegistration> _UserRegistration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnCityDescriptionChanging(string value);
    partial void OnCityDescriptionChanged();
    #endregion
		
		public City()
		{
			this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
			this._UserRegistration = default(EntityRef<UserRegistration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._UserRegistration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityDescription", DbType="VarChar(200)")]
		public string CityDescription
		{
			get
			{
				return this._CityDescription;
			}
			set
			{
				if ((this._CityDescription != value))
				{
					this.OnCityDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CityDescription = value;
					this.SendPropertyChanged("CityDescription");
					this.OnCityDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Area", Storage="_Areas", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Area> Areas
		{
			get
			{
				return this._Areas;
			}
			set
			{
				this._Areas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_City", Storage="_UserRegistration", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public UserRegistration UserRegistration
		{
			get
			{
				return this._UserRegistration.Entity;
			}
			set
			{
				UserRegistration previousValue = this._UserRegistration.Entity;
				if (((previousValue != value) 
							|| (this._UserRegistration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRegistration.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._UserRegistration.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("UserRegistration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HotelEventService")]
	public partial class HotelEventService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventServiceID;
		
		private int _HotelID;
		
		private string _EventName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventServiceIDChanging(int value);
    partial void OnEventServiceIDChanged();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    #endregion
		
		public HotelEventService()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventServiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventServiceID
		{
			get
			{
				return this._EventServiceID;
			}
			set
			{
				if ((this._EventServiceID != value))
				{
					this.OnEventServiceIDChanging(value);
					this.SendPropertyChanging();
					this._EventServiceID = value;
					this.SendPropertyChanged("EventServiceID");
					this.OnEventServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="Int NOT NULL")]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HotelFoodService")]
	public partial class HotelFoodService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FoodServiceID;
		
		private int _HotelID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodServiceIDChanging(int value);
    partial void OnFoodServiceIDChanged();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public HotelFoodService()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodServiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FoodServiceID
		{
			get
			{
				return this._FoodServiceID;
			}
			set
			{
				if ((this._FoodServiceID != value))
				{
					this.OnFoodServiceIDChanging(value);
					this.SendPropertyChanging();
					this._FoodServiceID = value;
					this.SendPropertyChanged("FoodServiceID");
					this.OnFoodServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="Int NOT NULL")]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HotelRoom")]
	public partial class HotelRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HotelRoomID;
		
		private int _HotelID;
		
		private int _RoomTypeID;
		
		private int _NumberOfRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelRoomIDChanging(int value);
    partial void OnHotelRoomIDChanged();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnRoomTypeIDChanging(int value);
    partial void OnRoomTypeIDChanged();
    partial void OnNumberOfRoomChanging(int value);
    partial void OnNumberOfRoomChanged();
    #endregion
		
		public HotelRoom()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelRoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HotelRoomID
		{
			get
			{
				return this._HotelRoomID;
			}
			set
			{
				if ((this._HotelRoomID != value))
				{
					this.OnHotelRoomIDChanging(value);
					this.SendPropertyChanging();
					this._HotelRoomID = value;
					this.SendPropertyChanged("HotelRoomID");
					this.OnHotelRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="Int NOT NULL")]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="Int NOT NULL")]
		public int RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfRoom", DbType="Int NOT NULL")]
		public int NumberOfRoom
		{
			get
			{
				return this._NumberOfRoom;
			}
			set
			{
				if ((this._NumberOfRoom != value))
				{
					this.OnNumberOfRoomChanging(value);
					this.SendPropertyChanging();
					this._NumberOfRoom = value;
					this.SendPropertyChanged("NumberOfRoom");
					this.OnNumberOfRoomChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HotelService")]
	public partial class HotelService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HotelServiceID;
		
		private int _HotelID;
		
		private string _ServiceName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelServiceIDChanging(int value);
    partial void OnHotelServiceIDChanged();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    #endregion
		
		public HotelService()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelServiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HotelServiceID
		{
			get
			{
				return this._HotelServiceID;
			}
			set
			{
				if ((this._HotelServiceID != value))
				{
					this.OnHotelServiceIDChanging(value);
					this.SendPropertyChanging();
					this._HotelServiceID = value;
					this.SendPropertyChanged("HotelServiceID");
					this.OnHotelServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="Int NOT NULL")]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MasterFeedback")]
	public partial class MasterFeedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeedbackID;
		
		private int _UserID;
		
		private string _FeedbackDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedbackIDChanging(int value);
    partial void OnFeedbackIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFeedbackDescriptionChanging(string value);
    partial void OnFeedbackDescriptionChanged();
    #endregion
		
		public MasterFeedback()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FeedbackID
		{
			get
			{
				return this._FeedbackID;
			}
			set
			{
				if ((this._FeedbackID != value))
				{
					this.OnFeedbackIDChanging(value);
					this.SendPropertyChanging();
					this._FeedbackID = value;
					this.SendPropertyChanged("FeedbackID");
					this.OnFeedbackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string FeedbackDescription
		{
			get
			{
				return this._FeedbackDescription;
			}
			set
			{
				if ((this._FeedbackDescription != value))
				{
					this.OnFeedbackDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FeedbackDescription = value;
					this.SendPropertyChanged("FeedbackDescription");
					this.OnFeedbackDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MasterHotelType")]
	public partial class MasterHotelType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HotelTypeId;
		
		private string _Name;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelTypeIdChanging(int value);
    partial void OnHotelTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MasterHotelType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HotelTypeId
		{
			get
			{
				return this._HotelTypeId;
			}
			set
			{
				if ((this._HotelTypeId != value))
				{
					this.OnHotelTypeIdChanging(value);
					this.SendPropertyChanging();
					this._HotelTypeId = value;
					this.SendPropertyChanged("HotelTypeId");
					this.OnHotelTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCategory")]
	public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubcategoryID;
		
		private string _SubcategoryName;
		
		private string _SubcategoryDescription;
		
		private int _CategoryID;
		
		private EntityRef<MasterCategory> _MasterCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubcategoryIDChanging(int value);
    partial void OnSubcategoryIDChanged();
    partial void OnSubcategoryNameChanging(string value);
    partial void OnSubcategoryNameChanged();
    partial void OnSubcategoryDescriptionChanging(string value);
    partial void OnSubcategoryDescriptionChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    #endregion
		
		public SubCategory()
		{
			this._MasterCategory = default(EntityRef<MasterCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubcategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubcategoryID
		{
			get
			{
				return this._SubcategoryID;
			}
			set
			{
				if ((this._SubcategoryID != value))
				{
					this.OnSubcategoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubcategoryID = value;
					this.SendPropertyChanged("SubcategoryID");
					this.OnSubcategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubcategoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SubcategoryName
		{
			get
			{
				return this._SubcategoryName;
			}
			set
			{
				if ((this._SubcategoryName != value))
				{
					this.OnSubcategoryNameChanging(value);
					this.SendPropertyChanging();
					this._SubcategoryName = value;
					this.SendPropertyChanged("SubcategoryName");
					this.OnSubcategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubcategoryDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string SubcategoryDescription
		{
			get
			{
				return this._SubcategoryDescription;
			}
			set
			{
				if ((this._SubcategoryDescription != value))
				{
					this.OnSubcategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SubcategoryDescription = value;
					this.SendPropertyChanged("SubcategoryDescription");
					this.OnSubcategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._MasterCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MasterCategory_SubCategory", Storage="_MasterCategory", ThisKey="CategoryID", OtherKey="CategoryId", IsForeignKey=true)]
		public MasterCategory MasterCategory
		{
			get
			{
				return this._MasterCategory.Entity;
			}
			set
			{
				MasterCategory previousValue = this._MasterCategory.Entity;
				if (((previousValue != value) 
							|| (this._MasterCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MasterCategory.Entity = null;
						previousValue.SubCategories.Remove(this);
					}
					this._MasterCategory.Entity = value;
					if ((value != null))
					{
						value.SubCategories.Add(this);
						this._CategoryID = value.CategoryId;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("MasterCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserHotel")]
	public partial class UserHotel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserHotelID;
		
		private int _HotelID;
		
		private int _UserID;
		
		private System.DateTime _Checkindate;
		
		private System.DateTime _Checkoutdate;
		
		private int _NumberOfAdultPerson;
		
		private int _NumberOfChildPerson;
		
		private int _RoomTypeID;
		
		private int _Amount;
		
		private int _NumberOfRooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserHotelIDChanging(int value);
    partial void OnUserHotelIDChanged();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCheckindateChanging(System.DateTime value);
    partial void OnCheckindateChanged();
    partial void OnCheckoutdateChanging(System.DateTime value);
    partial void OnCheckoutdateChanged();
    partial void OnNumberOfAdultPersonChanging(int value);
    partial void OnNumberOfAdultPersonChanged();
    partial void OnNumberOfChildPersonChanging(int value);
    partial void OnNumberOfChildPersonChanged();
    partial void OnRoomTypeIDChanging(int value);
    partial void OnRoomTypeIDChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnNumberOfRoomsChanging(int value);
    partial void OnNumberOfRoomsChanged();
    #endregion
		
		public UserHotel()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserHotelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserHotelID
		{
			get
			{
				return this._UserHotelID;
			}
			set
			{
				if ((this._UserHotelID != value))
				{
					this.OnUserHotelIDChanging(value);
					this.SendPropertyChanging();
					this._UserHotelID = value;
					this.SendPropertyChanged("UserHotelID");
					this.OnUserHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="Int NOT NULL")]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Checkindate", DbType="DateTime NOT NULL")]
		public System.DateTime Checkindate
		{
			get
			{
				return this._Checkindate;
			}
			set
			{
				if ((this._Checkindate != value))
				{
					this.OnCheckindateChanging(value);
					this.SendPropertyChanging();
					this._Checkindate = value;
					this.SendPropertyChanged("Checkindate");
					this.OnCheckindateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Checkoutdate", DbType="DateTime NOT NULL")]
		public System.DateTime Checkoutdate
		{
			get
			{
				return this._Checkoutdate;
			}
			set
			{
				if ((this._Checkoutdate != value))
				{
					this.OnCheckoutdateChanging(value);
					this.SendPropertyChanging();
					this._Checkoutdate = value;
					this.SendPropertyChanged("Checkoutdate");
					this.OnCheckoutdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfAdultPerson", DbType="Int NOT NULL")]
		public int NumberOfAdultPerson
		{
			get
			{
				return this._NumberOfAdultPerson;
			}
			set
			{
				if ((this._NumberOfAdultPerson != value))
				{
					this.OnNumberOfAdultPersonChanging(value);
					this.SendPropertyChanging();
					this._NumberOfAdultPerson = value;
					this.SendPropertyChanged("NumberOfAdultPerson");
					this.OnNumberOfAdultPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfChildPerson", DbType="Int NOT NULL")]
		public int NumberOfChildPerson
		{
			get
			{
				return this._NumberOfChildPerson;
			}
			set
			{
				if ((this._NumberOfChildPerson != value))
				{
					this.OnNumberOfChildPersonChanging(value);
					this.SendPropertyChanging();
					this._NumberOfChildPerson = value;
					this.SendPropertyChanged("NumberOfChildPerson");
					this.OnNumberOfChildPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="Int NOT NULL")]
		public int RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfRooms", DbType="Int NOT NULL")]
		public int NumberOfRooms
		{
			get
			{
				return this._NumberOfRooms;
			}
			set
			{
				if ((this._NumberOfRooms != value))
				{
					this.OnNumberOfRoomsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfRooms = value;
					this.SendPropertyChanged("NumberOfRooms");
					this.OnNumberOfRoomsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRegistration")]
	public partial class UserRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _Password;
		
		private int _UserPhoneNumber;
		
		private string _UserAddress;
		
		private int _CityID;
		
		private int _AreaID;
		
		private string _UserDOB;
		
		private string _Gender;
		
		private string _UserOccupation;
		
		private string _Maritial_Status;
		
		private string _Email_id;
		
		private EntitySet<Area> _Areas;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserPhoneNumberChanging(int value);
    partial void OnUserPhoneNumberChanged();
    partial void OnUserAddressChanging(string value);
    partial void OnUserAddressChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnAreaIDChanging(int value);
    partial void OnAreaIDChanged();
    partial void OnUserDOBChanging(string value);
    partial void OnUserDOBChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnUserOccupationChanging(string value);
    partial void OnUserOccupationChanged();
    partial void OnMaritial_StatusChanging(string value);
    partial void OnMaritial_StatusChanged();
    partial void OnEmail_idChanging(string value);
    partial void OnEmail_idChanged();
    #endregion
		
		public UserRegistration()
		{
			this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(20)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPhoneNumber", DbType="Int NOT NULL")]
		public int UserPhoneNumber
		{
			get
			{
				return this._UserPhoneNumber;
			}
			set
			{
				if ((this._UserPhoneNumber != value))
				{
					this.OnUserPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._UserPhoneNumber = value;
					this.SendPropertyChanged("UserPhoneNumber");
					this.OnUserPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserAddress
		{
			get
			{
				return this._UserAddress;
			}
			set
			{
				if ((this._UserAddress != value))
				{
					this.OnUserAddressChanging(value);
					this.SendPropertyChanging();
					this._UserAddress = value;
					this.SendPropertyChanged("UserAddress");
					this.OnUserAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="Int NOT NULL")]
		public int AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDOB", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UserDOB
		{
			get
			{
				return this._UserDOB;
			}
			set
			{
				if ((this._UserDOB != value))
				{
					this.OnUserDOBChanging(value);
					this.SendPropertyChanging();
					this._UserDOB = value;
					this.SendPropertyChanged("UserDOB");
					this.OnUserDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserOccupation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserOccupation
		{
			get
			{
				return this._UserOccupation;
			}
			set
			{
				if ((this._UserOccupation != value))
				{
					this.OnUserOccupationChanging(value);
					this.SendPropertyChanging();
					this._UserOccupation = value;
					this.SendPropertyChanged("UserOccupation");
					this.OnUserOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Maritial Status]", Storage="_Maritial_Status", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Maritial_Status
		{
			get
			{
				return this._Maritial_Status;
			}
			set
			{
				if ((this._Maritial_Status != value))
				{
					this.OnMaritial_StatusChanging(value);
					this.SendPropertyChanging();
					this._Maritial_Status = value;
					this.SendPropertyChanged("Maritial_Status");
					this.OnMaritial_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_id", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Email_id
		{
			get
			{
				return this._Email_id;
			}
			set
			{
				if ((this._Email_id != value))
				{
					this.OnEmail_idChanging(value);
					this.SendPropertyChanging();
					this._Email_id = value;
					this.SendPropertyChanged("Email_id");
					this.OnEmail_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_Area", Storage="_Areas", ThisKey="AreaID", OtherKey="AreaID")]
		public EntitySet<Area> Areas
		{
			get
			{
				return this._Areas;
			}
			set
			{
				this._Areas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegistration_City", Storage="_Cities", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = this;
		}
		
		private void detach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = null;
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.UserRegistration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MasterRoomType")]
	public partial class MasterRoomType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoomTypeID;
		
		private string _RoomTypeName;
		
		private string _RoomTypeDescription;
		
		private int _Price;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomTypeIDChanging(int value);
    partial void OnRoomTypeIDChanged();
    partial void OnRoomTypeNameChanging(string value);
    partial void OnRoomTypeNameChanged();
    partial void OnRoomTypeDescriptionChanging(string value);
    partial void OnRoomTypeDescriptionChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public MasterRoomType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string RoomTypeName
		{
			get
			{
				return this._RoomTypeName;
			}
			set
			{
				if ((this._RoomTypeName != value))
				{
					this.OnRoomTypeNameChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeName = value;
					this.SendPropertyChanged("RoomTypeName");
					this.OnRoomTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeDescription", DbType="VarChar(200)")]
		public string RoomTypeDescription
		{
			get
			{
				return this._RoomTypeDescription;
			}
			set
			{
				if ((this._RoomTypeDescription != value))
				{
					this.OnRoomTypeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeDescription = value;
					this.SendPropertyChanged("RoomTypeDescription");
					this.OnRoomTypeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MasterComplain")]
	public partial class MasterComplain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComplainID;
		
		private int _UserID;
		
		private string _ComplainSubject;
		
		private string _ComplainDescription;
		
		private string _Reply;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComplainIDChanging(int value);
    partial void OnComplainIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnComplainSubjectChanging(string value);
    partial void OnComplainSubjectChanged();
    partial void OnComplainDescriptionChanging(string value);
    partial void OnComplainDescriptionChanged();
    partial void OnReplyChanging(string value);
    partial void OnReplyChanged();
    #endregion
		
		public MasterComplain()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplainID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ComplainID
		{
			get
			{
				return this._ComplainID;
			}
			set
			{
				if ((this._ComplainID != value))
				{
					this.OnComplainIDChanging(value);
					this.SendPropertyChanging();
					this._ComplainID = value;
					this.SendPropertyChanged("ComplainID");
					this.OnComplainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplainSubject", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ComplainSubject
		{
			get
			{
				return this._ComplainSubject;
			}
			set
			{
				if ((this._ComplainSubject != value))
				{
					this.OnComplainSubjectChanging(value);
					this.SendPropertyChanging();
					this._ComplainSubject = value;
					this.SendPropertyChanged("ComplainSubject");
					this.OnComplainSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComplainDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string ComplainDescription
		{
			get
			{
				return this._ComplainDescription;
			}
			set
			{
				if ((this._ComplainDescription != value))
				{
					this.OnComplainDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ComplainDescription = value;
					this.SendPropertyChanged("ComplainDescription");
					this.OnComplainDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reply", DbType="VarChar(200)")]
		public string Reply
		{
			get
			{
				return this._Reply;
			}
			set
			{
				if ((this._Reply != value))
				{
					this.OnReplyChanging(value);
					this.SendPropertyChanging();
					this._Reply = value;
					this.SendPropertyChanged("Reply");
					this.OnReplyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPackage")]
	public partial class UserPackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserPackageID;
		
		private int _HotelID;
		
		private int _PackageID;
		
		private int _UserID;
		
		private int _Amount;
		
		private System.DateTime _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserPackageIDChanging(int value);
    partial void OnUserPackageIDChanged();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public UserPackage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPackageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserPackageID
		{
			get
			{
				return this._UserPackageID;
			}
			set
			{
				if ((this._UserPackageID != value))
				{
					this.OnUserPackageIDChanging(value);
					this.SendPropertyChanging();
					this._UserPackageID = value;
					this.SendPropertyChanged("UserPackageID");
					this.OnUserPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="Int NOT NULL")]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageID", DbType="Int NOT NULL")]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HotelOtherService")]
	public partial class HotelOtherService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OtherServiceID;
		
		private int _HotelID;
		
		private string _TexiService;
		
		private string _PickupPlace;
		
		private string _DestinationPlace;
		
		private string _VehicleType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOtherServiceIDChanging(int value);
    partial void OnOtherServiceIDChanged();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnTexiServiceChanging(string value);
    partial void OnTexiServiceChanged();
    partial void OnPickupPlaceChanging(string value);
    partial void OnPickupPlaceChanged();
    partial void OnDestinationPlaceChanging(string value);
    partial void OnDestinationPlaceChanged();
    partial void OnVehicleTypeChanging(string value);
    partial void OnVehicleTypeChanged();
    #endregion
		
		public HotelOtherService()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherServiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OtherServiceID
		{
			get
			{
				return this._OtherServiceID;
			}
			set
			{
				if ((this._OtherServiceID != value))
				{
					this.OnOtherServiceIDChanging(value);
					this.SendPropertyChanging();
					this._OtherServiceID = value;
					this.SendPropertyChanged("OtherServiceID");
					this.OnOtherServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="Int NOT NULL")]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TexiService", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string TexiService
		{
			get
			{
				return this._TexiService;
			}
			set
			{
				if ((this._TexiService != value))
				{
					this.OnTexiServiceChanging(value);
					this.SendPropertyChanging();
					this._TexiService = value;
					this.SendPropertyChanged("TexiService");
					this.OnTexiServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickupPlace", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PickupPlace
		{
			get
			{
				return this._PickupPlace;
			}
			set
			{
				if ((this._PickupPlace != value))
				{
					this.OnPickupPlaceChanging(value);
					this.SendPropertyChanging();
					this._PickupPlace = value;
					this.SendPropertyChanged("PickupPlace");
					this.OnPickupPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationPlace", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DestinationPlace
		{
			get
			{
				return this._DestinationPlace;
			}
			set
			{
				if ((this._DestinationPlace != value))
				{
					this.OnDestinationPlaceChanging(value);
					this.SendPropertyChanging();
					this._DestinationPlace = value;
					this.SendPropertyChanged("DestinationPlace");
					this.OnDestinationPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string VehicleType
		{
			get
			{
				return this._VehicleType;
			}
			set
			{
				if ((this._VehicleType != value))
				{
					this.OnVehicleTypeChanging(value);
					this.SendPropertyChanging();
					this._VehicleType = value;
					this.SendPropertyChanged("VehicleType");
					this.OnVehicleTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MasterHotelRegistration")]
	public partial class MasterHotelRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HotelID;
		
		private string _HotelName;
		
		private int _HotelTypeID;
		
		private string _Address;
		
		private string _Pincode;
		
		private string _EmailID;
		
		private string _Password;
		
		private string _photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnHotelNameChanging(string value);
    partial void OnHotelNameChanged();
    partial void OnHotelTypeIDChanging(int value);
    partial void OnHotelTypeIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPincodeChanging(string value);
    partial void OnPincodeChanged();
    partial void OnEmailIDChanging(string value);
    partial void OnEmailIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnphotoChanging(string value);
    partial void OnphotoChanged();
    #endregion
		
		public MasterHotelRegistration()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string HotelName
		{
			get
			{
				return this._HotelName;
			}
			set
			{
				if ((this._HotelName != value))
				{
					this.OnHotelNameChanging(value);
					this.SendPropertyChanging();
					this._HotelName = value;
					this.SendPropertyChanged("HotelName");
					this.OnHotelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelTypeID", DbType="Int NOT NULL")]
		public int HotelTypeID
		{
			get
			{
				return this._HotelTypeID;
			}
			set
			{
				if ((this._HotelTypeID != value))
				{
					this.OnHotelTypeIDChanging(value);
					this.SendPropertyChanging();
					this._HotelTypeID = value;
					this.SendPropertyChanged("HotelTypeID");
					this.OnHotelTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pincode", DbType="varchar(10) NOT NULL", CanBeNull=false)]
		public string Pincode
		{
			get
			{
				return this._Pincode;
			}
			set
			{
				if ((this._Pincode != value))
				{
					this.OnPincodeChanging(value);
					this.SendPropertyChanging();
					this._Pincode = value;
					this.SendPropertyChanged("Pincode");
					this.OnPincodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailID
		{
			get
			{
				return this._EmailID;
			}
			set
			{
				if ((this._EmailID != value))
				{
					this.OnEmailIDChanging(value);
					this.SendPropertyChanging();
					this._EmailID = value;
					this.SendPropertyChanged("EmailID");
					this.OnEmailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo", DbType="NVarChar(MAX)")]
		public string photo
		{
			get
			{
				return this._photo;
			}
			set
			{
				if ((this._photo != value))
				{
					this.OnphotoChanging(value);
					this.SendPropertyChanging();
					this._photo = value;
					this.SendPropertyChanged("photo");
					this.OnphotoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Package")]
	public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PackageID;
		
		private int _HotelID;
		
		private string _PackageName;
		
		private string _PackageDescription;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _Amount;
		
		private string _photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackageIDChanging(int value);
    partial void OnPackageIDChanged();
    partial void OnHotelIDChanging(int value);
    partial void OnHotelIDChanged();
    partial void OnPackageNameChanging(string value);
    partial void OnPackageNameChanged();
    partial void OnPackageDescriptionChanging(string value);
    partial void OnPackageDescriptionChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnphotoChanging(string value);
    partial void OnphotoChanged();
    #endregion
		
		public Package()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PackageID
		{
			get
			{
				return this._PackageID;
			}
			set
			{
				if ((this._PackageID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._PackageID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotelID", DbType="Int NOT NULL")]
		public int HotelID
		{
			get
			{
				return this._HotelID;
			}
			set
			{
				if ((this._HotelID != value))
				{
					this.OnHotelIDChanging(value);
					this.SendPropertyChanging();
					this._HotelID = value;
					this.SendPropertyChanged("HotelID");
					this.OnHotelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PackageName
		{
			get
			{
				return this._PackageName;
			}
			set
			{
				if ((this._PackageName != value))
				{
					this.OnPackageNameChanging(value);
					this.SendPropertyChanging();
					this._PackageName = value;
					this.SendPropertyChanged("PackageName");
					this.OnPackageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string PackageDescription
		{
			get
			{
				return this._PackageDescription;
			}
			set
			{
				if ((this._PackageDescription != value))
				{
					this.OnPackageDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PackageDescription = value;
					this.SendPropertyChanged("PackageDescription");
					this.OnPackageDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_photo", DbType="NVarChar(MAX)")]
		public string photo
		{
			get
			{
				return this._photo;
			}
			set
			{
				if ((this._photo != value))
				{
					this.OnphotoChanging(value);
					this.SendPropertyChanging();
					this._photo = value;
					this.SendPropertyChanged("photo");
					this.OnphotoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
